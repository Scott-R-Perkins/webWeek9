Frontend
npx create-react-app frontend --template @chakra-ui
npm i react-router-dom

"rafc" to quickly create template for pages


Backend
dotnet new webapi -o backend

dotnet new tool-manifest
dotnet tool install dotnet-ef
dotnet tool install dotnet-aspnet-codegenerator
dotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Design
dotnet add package Microsoft.EntityFrameworkCore.Design
dotnet add package Microsoft.EntityFrameworkCore.Sqlserver
dotnet add package Microsoft.EntityFrameworkCore.Tools

Adding connection string to the project
add to the top of appsettings.json (ctrl+space should bring up snippets, may req c# extension)
{
  "ConnectionStrings": {
    "TestDb": "<Connection_String>"
  },
}

Dbcontext stuff 
make Data folder

create models folder and 3 models based on the requirements from the lab, use whats there now that was copoed from Oliver as examples.
Look into mapping table for M:M relationships (what I copied from oliver should work?)

after models, scaffold the controllers with dotnet-aspnet-codegenerator
dotnet aspnet-codegenerator controller -name WeaponController -api -m Weapon -dc Week9Lab7Context -outDir Controllers


after finishing the stuff below, do migration

dotnet ef migrations add initial -c FantasyDBContext -o Data/Migrations/InitialMigration
dotnet ef database update
dotnet run



TODO:
backend
Create DTO's based on requests and responses that the frontend requires, can be mapped to the data model

Endpoints are all there, need to test if they are all working
    Get/Delete are ez
    For post, I remove the ID value as it will give it an incrementing ID, trying to set it myself, even if its the one it would give it anyway cuases and error 
    For put I put the ID in the field at the top then need to add everything I want, it will modify the item so I need to make sure I fill in every field
        Easy way to do this would be to copy it from Get first, then edit what I want.
Finish all the img urls on the database (Staves)


Frontend
Frontend should have a dashboard area to allow modifying existing items, creating new items and 
    deleting items from the store. (mostly done)
Filtering method for items (not sure what I'll do for this yet)
sorting method (sort by dps/ability power for weapons, physical/magical defense for armour and potion potency for potions)





fetch url is localhost:8000/api/object
example
localhost:8000/api/armour
so maybe do a seperate page for each thing?
or seperate them on the same page?
We had to have a filter, maybe look into a dropdown that will show all weapons and nothing else, same for the others.

this is how oliver did his env variable and fetch 

fetch(`$(process.end.REACT_APP_BACKEND_URL)/Foods`) 

So I could just have the env variable as localhost:8000/api
then each fetch does the /Weapon /Armour /Potion

