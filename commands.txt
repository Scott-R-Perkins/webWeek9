Frontend
npx create-react-app frontend --template @chakra-ui
npm i react-router-dom

"rafc" to quickly create template for pages


Backend
dotnet new webapi -o backend

dotnet new tool-manifest
dotnet tool install dotnet-ef
dotnet tool install dotnet-aspnet-codegenerator
dotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Design
dotnet add package Microsoft.EntityFrameworkCore.Design
dotnet add package Microsoft.EntityFrameworkCore.Sqlserver
dotnet add package Microsoft.EntityFrameworkCore.Tools

Adding connection string to the project
add to the top of appsettings.json (ctrl+space should bring up snippets, may req c# extension)
{
  "ConnectionStrings": {
    "TestDb": "<Connection_String>"
  },
}

Dbcontext stuff 
make Data folder

create models folder and 3 models based on the requirements from the lab, use whats there now that was copoed from Oliver as examples.
Look into mapping table for M:M relationships (what I copied from oliver should work?)

after models, scaffold the controllers with dotnet-aspnet-codegenerator
dotnet aspnet-codegenerator controller -name FoodController -api -m Food -dc Week9Lab7Context -outDir Controllers


after finishing the stuff below, do migration

dotnet ef migrations add initial -c *context here* -o Data/Migrations/InitialMigration
dotnet ef database update
dotnet run



TODO:
Backend
Generate controllers
Migrate and update database
Only create endpoints the frontend will use, no hanging endpoints
Create DTO's based on requests and responses that the frontend requires, can be mapped to the data model

Frontend
Create Frontend interface (Yoink the stuff from the other store we made?)
Link it to the items from my shop
Frontend should have a dashboard area to allow modifying
    existing items, creating new items and deletijng items from 
        the store.
Filtering method for items (not sure what I'll do for this yet)
sorting method (sort by dps/ability power for weapons, physical/magical defense for armour and potion potency for potions)
Search bar that allows searching by name.


Seeding data
in data folder
Seed.cs
call it from the context file 

public overrride void OnModelCreating(ModelBuilder builder){
    var manufacturers = Seed.GetManufacturers(manufacturers);
    var food = Seed.GetFood(food);
    var vehicle = seed.GetVehicles(vehicle);
    var ManufacturerFood = Seed.ManufacturerFood(manufacturers, food);
}



//part of the bogus package, look into this

using backend.Data;

public static class Seed{
    public static List<Manufacturers> GetManufacturers(int count 10){
        var ManucaturerId = 1;
        var faker = new Faker<Manufaturer>().Rules((f, m) =>
        {
            m.Id = ManucaturerId++,
            m.Name = f.Company.CompanyName();
            m.Location = f.Address.Country();
        });    
        return Faker.Generate(count);
    }
    
    public static List<Vehicle> GetVehicles(List<Manufacturer> manufacturers, int count 10){
        var vehicleId = 1;
        var faker = new Faker<Vehicle>()
        .Rules((f, v) =>
        {
            v.Id = vehicleId++,
            v.Name = f.Vehicle.Model();
            v.Speed - f.Vehicle.Random.Int(20, 100);
            v.ManucaturerId = f.PickRandom(manufacturers).Id;
        });  
        return faker.Generate(count);
    }
    public static List<Food> GetFood(int count 10){
        var FoodId = 1;
        var faker = new Faker<Food>().Rules((f, food) =>
        {
            food.Id = FoodId++,
            food.Name = f.Lorem.Word();
            food.Location = f.Lorem.Paragraph();
        });    
        return Faker.Generate(count);
    }
    public static List<ManufacturersFood> ManufacturerFoods(List<Manufacturer> manufacturers, List<Food> foods ,int count 10)
    {
        var mfList = new List<ManufacturerFood>();
        var ManufacturerFoodId = 0;
        foreach(var food in foods)
        {
            ManufacturerFoodId++;
            mfList.Add(new ManufacturerFood(Id = ManufacturerFoodId, FoodId = food.id, ManucaturerId = Random.Shared.Next(manufacturers.count)+1));   might be {} after new ManufacturerFood
        }
        return mfList;
    }
}

